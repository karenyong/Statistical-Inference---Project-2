avg_interval <- tapply(activitynew$steps, activitynew$interval, mean, na.rm=TRUE, simplify=TRUE)
#assign average values of steps to missing values according to intervals
activitynew$steps[nas] <- avg_interval[as.character(activitynew$interval[nas])]
View(activitynew)
View(activity)
sum(is.na(activitynew$steps))
head(activitynew)
nas
avg_interval
View(activity)
head(activitynew)
totalstepsnew <- aggregate(steps~date, activitynew, sum)
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
totalstepsnew <- aggregate(steps~date, activitynew, sum)
ggplot(totalstepsnew, aes(x = steps)) + geom_histogram(fill = "green", binwidth = 1000) +
labs(title="Steps Taken per Day", x = "Number of Steps per Day", y = "Count")
meanstepsnew <- mean(totalstepsnew$steps)
meanstepsnew
medstepsnew <- median(totalstepsnew$steps)
medstepsnew
library(lubridate)
activitynew$weekday <- wday(activitynew$date, label=TRUE, abbr=FALSE)
head(activitynew)
View(activitynew)
activitynew$day <- wday(activitynew$date, label=TRUE, abbr=FALSE)
head(activitynew)
rm(activitynew$weekday)
activitynew$weekday <- NULL
activitynew
head(activitynew)
activitynew$daytype <- factor(activitynew$day)
levels(activitynew$daytype) <- list(
weekday=c("Monday", "Tuesday", "Wednesday","Thursday","Friday"),
weekend=c("Saturday","Sunday")
)
head(activitynew)
dailyavgnew <- aggregate(steps ~ interval, activitynew, mean)
str(dailyavgnew)
View(dailyavgnew)
dailyavgnew <- aggregate(steps ~ daytype + interval, activitynew, mean)
dailyavgnew$interval <- as.numeric(as.character(dailyavgnew$interval))
ggplot(dailyavgnew, aes(x=interval, y=steps)) + geom_line(color="green", size=1) +
labs(title="Time Series of Daily Activity Pattern", x="Interval",
y="Average Number of Steps") + facet_wrap(~ daytype, nrow=2, ncol=1)
ggplot(dailyavgnew, aes(x=interval, y=steps)) + geom_line(color="violet", size=1) +
labs(title="Time Series of Daily Activity Pattern", x="Interval",
y="Average Number of Steps") + facet_wrap(~ daytype, nrow=2, ncol=1)
ggplot(dailyavgnew, aes(x=interval, y=steps)) + geom_line(color="violet") +
labs(title="Time Series of Daily Activity Pattern", x="Interval",
y="Average Number of Steps") + facet_wrap(~ daytype, nrow=2, ncol=1)
View(totalsteps)
View(dailyavg)
activity <- read.csv("activity.csv")
str(activity)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
str(activity)
pnorm(70, 80, 10)
qnorm(0.95, 1100,75)
x <- rnorm(100)
pbinom(5,)
pbinom(5,4)
pbinom(2,5,4)
qnorm(0.95, 1100, 75/sqrt(100))
qnorm(0.95, 1100, 75^2/100
qnorm(0.95, 1100, 75^2/100)
qnorm(0.95, 1100, 75^2/100^2)
qnorm(0.95, 1100, (75^2)/100)
75/sqrt(100)
75*75/100
(75^2)/100
pbinom(4,5,0.5)
pbinom(4,5,0.5,lower.tail=F)
pbinom(3,5,0.5,lower.tail=F)
ppois(16, 15) - ppois(14, 15)
10/sqrt(100)
pnorm(16, 15, 1) - pnorm(14, 15, 1)
ppois(10, 5)
ppois(10, 5, lower.tail=FALSE)
ppois(10, 5*3, lower.tail=FALSE)
ppois(10, 5/3, lower.tail=FALSE)
ppois(10, 5, lower.tail=FALSE)
ppois(10, 5, lower.tail=FALSE)*3
ppois(10, 5*3)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
swirl()
1- 3/36
deck
1/52
52
4/52
0
13/52
12/52
2/51
t.test(9,paired=FALSE)
ts <- qt(0.95/2, 8)
ts
(1,1000 + c(-1,1) * ts * sample.sd / sqrt(n))
1,1000 + c(-1,1) * ts * sample.sd / sqrt(n)
sample.mean + c(-1,1) * ts * sample.sd / sqrt(n)
n <- 9
sample.mean <- 1,100
sample.sd <- 30
ts <- qt(0.95/2, 8)
sample.mean + c(-1,1) * ts * sample.sd / sqrt(n)
x <- sample.mean + c(-1,1) * ts * sample.sd / sqrt(n)
n <- 9
sample.mean <- 1,100
sample.sd <- 30
ts <- qt(0.95/2, 8)
n <- 9
sample.mean <- 1100
sample.sd <- 30
ts <- qt(0.95/2, 8)
x <- sample.mean + c(-1,1) * ts * sample.sd / sqrt(n)
x
n <- 9
sample.mean <- 1100
sample.sd <- 30
alpha <- 0.05
ts <- qt(1-alpha/2, 8)
x <- sample.mean + c(-1,1) * ts * sample.sd / sqrt(n)
x
ts1 <- qt(0.95, n-1)
x1 <- sample.mean + c(-1,1) * ts * sample.sd / sqrt(n)
x1
round(x)
n <- 9
t <- 6
mean.diff <- -2
ts <- qt(0.95, n-1)
sd <- -mean.diff * sqrt(n) /ts
sd
x_bar <- -2
n <- 9
alpha <- 0.05
ts <- qt(1 - alpha / 2, n - 1) # 2.306004
s <- -x_bar*sqrt(n) / ts
s # 2.601903
n <- 9
t <- 6
mean.diff <- -2
ts <- qt(0.95/2, n-1)
sd <- -mean.diff * sqrt(n) /ts
sd
n <- 9
mean.diff <- -2
ts <- qt(0.95, n-1)
ts
ts <- qt(0.05/2, n-1)
sd <- -mean.diff * sqrt(n) /ts
sd
ts
-mean.diff
n <- 9
mean.diff <- -2
ts <- qt(0.05/2, n-1)
ts
sd <- mean.diff * sqrt(n) /ts
sd
n <- 9
mean.diff <- -2
ts <- qt(0.05/2, n-1)
ts
sd <- mean.diff * sqrt(n) /ts
sd
n <- 9
mean.diff <- -2
ts <- qt(0.95/2, n-1)
ts
sd <- mean.diff * sqrt(n) /ts
sd
ts <- qt(0.95, n-1)
ts
alpha <- 0.05
ts <- qt(1 - alpha / 2, n - 1)
ts
t.test(9)
ts <- qt(0.95, n-1)
ts
n <- 9
sample.mean <- 1100
sample.sd <- 30
ts <- qt(0.95, n-1)
ts
x <- round(sample.mean + c(-1,1) * ts * sample.sd / sqrt(n))
x
n <- 9
sample.mean <- 1100
sample.sd <- 30
ts <- qt(0.975, n-1)
ts
x <- round(sample.mean + c(-1,1) * ts * sample.sd / sqrt(n))
x
n <- 9
mean.diff <- -2
ts <- qt(0.975, n-1)
ts
sd <- mean.diff * sqrt(n) /ts
sd
n <- 9
mean.diff <- -2
ts <- qt(0.975, n-1)
ts
sd <- -mean.diff * sqrt(n) /ts
sd
n1 <- 10
n2 <- 10
mean1 <- 3
var1 <- 0.6
meanold <- 5
varold<- 0.68
sp <- sqrt((9*0.6 + 9*0.68) / 18)
sp
ts <- 3 - 5 + c(-1,1) + qt(0.975,18) * sp * (1/10 + 1/10)^0.5
ts
quantile = 0.975 # is 95% with 2.5% on both sides of the range
n_y <- 10 # nights new system
n_x <- 10 # nights old system
var_y <- 0.60 # variance new (sqrt of σ)
var_x <- 0.68 # variance old (sqrt of σ)
μ_y <- 3# average hours new system
μ_x <- 5# average hours old system
# calculate pooled standard deviation
σ_p <- sqrt(((n_x - 1) * var_x + (n_y - 1) * var_y)/(n_x + n_y - 2))
σ_p
confidenceInterval <- μ_y - μ_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * σ_p * (1 / n_x + 1 / n_y)^.5
confidenceInterval
ts <- 3 - 5 + c(-1,1) + qt(0.975,18) * sp * (1/10 + 1/10)^0.5
ts
σ_p
sp
μ_y - μ_x
ts <- 3 - 5 + c(-1,1) + qt(0.975,18) * sp * (1/10 + 1/10)^.5
ts
confidenceInterval <- μ_y - μ_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * σ_p * (1 / n_x + 1 / n_y)^.5
confidenceInterval
ts <- mean1 - meanold + c(-1,1) + qt(0.975,df=n1+n2 - 2) * sp * (1/n1 + 1/n2)^.5
ts
n1 <- 100
n2 <- 100
mwtnew <- 4
sdnew <- 0.5
mwtold <- 6
sdold <- 2
σ_p <- sqrt(((n1 - 1) * sdnew^2 + (n2 - 1) * sdold^2)/(n1 + n2 - 2))
σ_p
confidenceInterval <- mwtnew - mwtold + c(-1, 1) * qnorm(0.975) * σ_p * (1 /n1 + 1 / n2)^.5
confidenceInterval
confidenceInterval <- mwtold - mwtnew+ c(-1, 1) * qnorm(0.975) * σ_p * (1 /n1 + 1 / n2)^.5
confidenceInterval
quantile <- 0.95
n1 <- 9
n2 <- 9
m1 <- -3
m2 <- 1
sd1 <- 1.5
sd2 <- 1.8
σ_p <- sqrt(((n1 - 1) * sd1^2 + (n2 - 1) * sd2^2)/(n1 + n2 - 2))
σ_p
confidenceInterval <- m1 - m2+ c(-1, 1) * qnorm(0.95) * σ_p * (1 /n1 + 1 / n2)^.5
confidenceInterval
round(confidenceInterval)
confidenceInterval <- m1 - m2+ c(-1, 1) * qt(0.95, n1+n2-2) * σ_p * (1 /n1 + 1 / n2)^.5
confidenceInterval
n = 9
sd.test <- 1.1
avg.test <- 1100
results <- 1100 + c(-1,1) + qt(0.975, 8) * 1.1/sqrt(9)
results
round(results)
n = 9
sd.test <- 30
avg.test <- 1100
results <- 1100 + c(-1,1) + qt(0.975, 8) * 30/sqrt(9)
round(results)
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n = 9
sd.test <- 30
avg.test <- 1100
results <- 1100 + c(-1,1) + qt(0.975, 8) * 30/sqrt(9)
results
n = 9
sd.test <- 30
avg.test <- 1100
results <- 1100 + c(-1,1) * qt(0.975, 8) * 30/sqrt(9)
results
n = 9
sd.test <- 30
avg.test <- 1100
#confidence interval
CI <- 1100 + c(-1,1) * qt(0.975, 8) * 30/sqrt(9)
CI
n = 4
x = 3
test <- pbinom(3, 4, 0.95, lower.tail=FALSE)
test
test <- pbinom(3, 4, 0.95, lower.tail=FALSE, alt="greater")
test <- binom.test(3, 4, 0.5, , alt="greater")
test
test <- binom.test(3, 4, alt="greater")
test
test$p.value
rate <- 1/100
error <- 10
days <- 1787
result <- poisson.test(error, T=days, r=rate, alt="less")
result$p.value
ppois(10, 10*1787, lower.tail=FALSE)
ppois(9, 10*1787, lower.tail=FALSE)
ppois(1, 10*1787, lower.tail=FALSE)
n.treat = 9
n.placebo = 9
t = 4
avg.treat = -3
avg.placebo = 1
sd.treat = 1.5
sd.placebo = 1.8
#pooled variance
sp <- ((n.treat-1) * sd.treat^2 + (n.placebo-1) * sd.placebo ^2) / (n.treat + n.placebo - 2)
sp
n.treat = 9
n.placebo = 9
t = 4
avg.treat = -3
avg.placebo = 1
sd.treat = 1.5
sd.placebo = 1.8
#pooled variance
sp <- sqrt((n.treat-1 * sd.treat^2 + n.placebo-1* sd.placebo ^2) / (n.treat + n.placebo - 2))
sp
t.test(avg.treat, avg.placebo, alt="two.sided")
sp <- (n.treat-1 * sd.treat^2 + n.placebo-1* sd.placebo ^2) / (n.treat + n.placebo - 2)
sp
n.treat = 9
n.placebo = 9
t = 4
avg.treat = -3
avg.placebo = 1
sd.treat = 1.5
sd.placebo = 1.8
df <- n.treat + n.placebo - 2
#pooled sd
sp <- (n.treat-1 * sd.treat^2 + n.placebo-1* sd.placebo ^2) / (n.treat + n.placebo - 2)
se.diff <- sqrt(sp/n.treat + sp/n.placebo)
ts <- avg.treat - avg.place / se.diff
pval <- 2 * pt(ts, df)
n.treat = 9
n.placebo = 9
t = 4
avg.treat = -3
avg.placebo = 1
sd.treat = 1.5
sd.placebo = 1.8
df <- n.treat + n.placebo - 2
#pooled sd
sp <- (n.treat-1 * sd.treat^2 + n.placebo-1* sd.placebo ^2) / (n.treat + n.placebo - 2)
se.diff <- sqrt(sp/n.treat + sp/n.placebo)
ts <- avg.treat - avg.place / se.diff
n.treat = 9
n.placebo = 9
t = 4
avg.treat = -3
avg.placebo = 1
sd.treat = 1.5
sd.placebo = 1.8
df <- n.treat + n.placebo - 2
#pooled sd
sp <- (n.treat-1 * sd.treat^2 + n.placebo-1* sd.placebo ^2) / (n.treat + n.placebo - 2)
se.diff <- sqrt(sp/n.treat + sp/n.placebo)
ts <- avg.treat - avg.placebo / se.diff
n.treat = 9
n.placebo = 9
t = 4
avg.treat = -3
avg.placebo = 1
sd.treat = 1.5
sd.placebo = 1.8
df <- n.treat + n.placebo - 2
#pooled sd
sp <- (n.treat-1 * sd.treat^2 + n.placebo-1* sd.placebo ^2) / (n.treat + n.placebo - 2)
se.diff <- sqrt(sp/n.treat + sp/n.placebo)
ts <- avg.treat - avg.placebo / se.diff
pval <- 2 * pt(ts, df)
pval
pval*10^5
pval <- pt(avg.treat - avg.placebo / sqrt(sp/n.treat + sp/n.placebo), df)
pval
pval <- pt((avg.treat - avg.placebo / sqrt(sp/n.treat + sp/n.placebo), df))
pval
pval <- pt((avg.treat - avg.placebo / sqrt(sp/n.treat + sp/n.placebo), df))
pval <- pt((avg.treat - avg.placebo) / sqrt(sp/n.treat + sp/n.placebo), df)
pval
pval <- pval*2
pval
n.treat = 9
n.placebo = 9
t = 4
avg.treat = -3
avg.placebo = 1
sd.treat = 1.5
sd.placebo = 1.8
df <- n.treat + n.placebo - 2
#pooled variance
sp <- (n.treat-1 * sd.treat^2 + n.placebo-1* sd.placebo ^2) / (n.treat + n.placebo - 2)
pval <- pt((avg.treat - avg.placebo) / sqrt(sp/n.treat + sp/n.placebo), df)
pval <- pval*2
pval
n <- 100
t <- 4
lambda <- 0.01
se <- 0.04
alpha <- 0.05
pow <- power.t.test(100, 0.01*4, 0.04, alt="one.sided")$power
pow
n <- 100
t <- 4
mean <- 0.01
se <- 0.04
alpha <- 0.05
pow <- power.t.test(100, 0.01, 0.04, sig.level=p, type="one.sample", alt="one.sided")$power
pow
n <- 100
t <- 4
mean <- 0.01
se <- 0.04
alpha <- 0.05
pow <- power.t.test(100, 0.01, 0.04, sig.level=alpha, type="one.sample", alt="one.sided")$power
pow
mean <- 0.01
se <- 0.04
pow <- 0.9
alpha <- 0.05
n <- power.t.test(power=pow, delta=mean, sd=se , sig.level=alpha, type="one.sample", alt="one.sided")$n
n
ceiling(n/10)*10
ceiling(n)
pow <- power.t.test(100, 0.01, 0.04, sig.level=0.1, type="one.sample", alt="one.sided")$power
pow
lambda <- 0.2
n <- 40             #number of exponentials
nosim <- 1000       #number of simulations
#to enable reproduceability
set.seed(5678)
for (i in 1:nosim) {
exp.sim[i, 1] <- mean(rexp(n, lambda))
}
sample.mean <- mean(exp.mean)
sample.mean
exp.sim <- data.frame(mean = nosim)
for (i in 1:nosim) {
exp.sim[i, 1] <- mean(rexp(n, lambda))
}
sample.mean <- mean(exp.mean)
sample.mean <- mean(exp.sim)
sample.mean
View(exp.sim)
class(exp.sim)
summary(exp.sim)
str(exp.sim)
sample.mean <- mean(exp.sim)
sample.mean <- mean(exp.sim$mean)
sample.mean
head(exp.sim)
set.seed(5678)
exp.sim <- data.frame(mean = nosim)
for (i in 1:nosim) {
exp.sim[i, 1] <- mean(rexp(n, lambda))
}
head(exp.sim)
sample.mean <- mean(exp.sim$mean)
sample.mean
lambda <- 0.2
n <- 40             #number of exponentials
nosim <- 1000       #number of simulations
#to enable reproduceability
set.seed(1234)
exp.sim <- data.frame(mean = nosim)
for (i in 1:nosim) {
exp.sim[i, 1] <- mean(rexp(n, lambda))
}
head(exp.sim)
sample.mean <- mean(exp.sim$mean)
sample.mean
t.mean <- 1/lambda
t.mean
sample.mean <- round(mean(exp.sim$mean), 3)
sample.mean
hist(exp.sim$mean,
breaks = 100,
prob = TRUE,
main="Exponential Distribution n = 1000",
xlab="Spread")
abline(v = t.mean,
col= 3,
lwd = 2)
abline(v = sample.mean,
col = 2,
lwd = 2)
legend('topright', c("Sample Mean", "Theoretical Mean"),
bty = "n",
lty = c(1,1),
col = c(col = 3, col = 2))
setwd("~/Documents/01 MOOC Data Science/Assignment Files/06 Statistical Inference")
